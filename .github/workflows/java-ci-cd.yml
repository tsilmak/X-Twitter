name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
  workflow_dispatch:

env:
  AWS_REGION: eu-west-3
  ECR_REPOSITORY: x-java-app
  ECS_SERVICE: x-main-app
  ECS_CLUSTER: x-cluster
  ECS_TASK_DEFINITION: x-main-app

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 25
        uses: actions/setup-java@v4
        with:
          java-version: "25"
          distribution: "temurin"

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run tests
        run: |
          cd backend
          ./gradlew test

      - name: Build application
        run: |
          cd backend
          ./gradlew bootJar

  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "25"
          distribution: "temurin"

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Java application
        run: |
          cd backend
          echo "Building Java application..."
          ./gradlew clean bootJar --info
          echo "Build completed successfully"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_TAG_LATEST: latest
        run: |
          echo "Building Docker image..."
          # Build Docker image with build args for better caching
          docker build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST \
            ./backend

          echo "Docker build completed successfully"
          echo "Pushing images to ECR..."

          # Push to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST

          echo "Images pushed successfully"
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image-latest=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST" >> $GITHUB_OUTPUT

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: main-app
          image: ${{ steps.build-image.outputs.image }}

      - name: Update environment variables for production
        run: |
          # Update JPA_HIBERNATE_DDL to 'validate' for production safety
          jq '(.containerDefinitions[0].environment[] | select(.name == "JPA_HIBERNATE_DDL") | .value) = "validate"' task-definition.json > task-definition-updated.json

          # Update SPRING_PROFILES_ACTIVE to production
          jq '(.containerDefinitions[0].environment[] | select(.name == "SPRING_PROFILES_ACTIVE") | .value) = "production"' task-definition-updated.json > task-definition-final.json

          mv task-definition-final.json task-definition.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Verify deployment
        run: |
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }}

          echo "Checking service status..."
          aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount,PendingCount:pendingCount}'

          echo "Checking target group health..."
          aws elbv2 describe-target-health --target-group-arn "arn:aws:elasticloadbalancing:${{ env.AWS_REGION }}:457713535403:targetgroup/x-main-app-tg-new/18e3f7e9602660a1" --query 'TargetHealthDescriptions[*].{Target:Target.Id,State:TargetHealth.State,Reason:TargetHealth.Reason}'

      - name: Test health endpoint
        run: |
          echo "Testing health endpoint..."
          sleep 30  # Wait for service to be fully ready

          # Test CloudFront endpoint
          echo "Testing CloudFront health endpoint..."
          curl -f "https://d15qcakwqpxz8g.cloudfront.net/actuator/health" || echo "CloudFront health check failed"

          # Test ALB endpoint directly
          echo "Testing ALB health endpoint..."
          curl -f "http://x-alb-1058931745.eu-west-3.elb.amazonaws.com/actuator/health" || echo "ALB health check failed"

      - name: Cleanup old images
        if: always()
        run: |
          echo "Cleaning up old ECR images (keeping last 5 versions)..."
          aws ecr list-images --repository-name ${{ env.ECR_REPOSITORY }} --filter tagStatus=TAGGED --query 'imageIds[?imageTag!=`latest`]' --output json > images.json

          # Get all images except latest, sort by push date, and delete all but the last 5
          aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} --query 'imageDetails[?imageTags!=`null`]' --output json > image-details.json

          # This is a simplified cleanup - in production you might want more sophisticated logic
          echo "Cleanup completed (manual cleanup may be needed for older images)"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment successful!"
          else
            echo "Deployment failed!"
            echo "Check the logs above for details."
          fi
