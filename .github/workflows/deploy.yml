name: Deploy Java App to ECS Fargate

on:
  push:
    branches: [main]
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: x-java-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Java application
          cd backend
          ./gradlew bootJar

          # Build Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

          # Push to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition x-main-app --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: main-app
          image: ${{ steps.build-image.outputs.image }}

      - name: Update JPA_HIBERNATE_DDL to validate (safe for production)
        run: |
          # Update the task definition to use 'validate' instead of 'update' for production safety
          jq '(.containerDefinitions[0].environment[] | select(.name == "JPA_HIBERNATE_DDL") | .value) = "validate"' task-definition.json > task-definition-updated.json
          mv task-definition-updated.json task-definition.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: x-main-app
          cluster: x-cluster
          wait-for-service-stability: true

      - name: Verify deployment
        run: |
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable --cluster x-cluster --services x-main-app

          echo "Checking service status..."
          aws ecs describe-services --cluster x-cluster --services x-main-app --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount}'

          echo "Checking target group health..."
          aws elbv2 describe-target-health --target-group-arn "arn:aws:elasticloadbalancing:eu-west-3:457713535403:targetgroup/x-main-app-tg-new/18e3f7e9602660a1" --query 'TargetHealthDescriptions[*].{Target:Target.Id,State:TargetHealth.State}'

      - name: Test health endpoint
        run: |
          echo "Testing health endpoint..."
          sleep 30  # Wait for service to be fully ready
          curl -f "https://d15qcakwqpxz8g.cloudfront.net/actuator/health" || echo "Health check failed, but deployment may still be in progress"
